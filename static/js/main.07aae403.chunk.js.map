{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","serviceWorker.js","index.js"],"names":["SET_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","Cardlist","map","robot","Searchbox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","height","border","children","ErrorBoundary","state","hasError","errorInfo","this","setState","Component","App","onGetRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","getRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.07aae403.chunk.js","sourcesContent":["export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { SET_SEARCH_FIELD } from './constants';\r\nimport { REQUEST_ROBOTS_PENDING } from './constants'; \r\nimport { REQUEST_ROBOTS_SUCCESS } from './constants'; \r\nimport { REQUEST_ROBOTS_FAILED } from './constants'; \r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\t\tsearchField: action.payload\r\n\t\t\t\t})\r\n\t\t\t\r\n\t\tdefault:\r\n\t\t\treturn state \r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const getRobots = (state = initialStateRobots, action={}) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { isPending: false, robots: action.payload })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { isPending: false, error: action.payload })\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\r\n\r\n\t}\r\n}\r\n\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n\t\r\n\treturn (\r\n\r\n\t\t<div className=\"tc w5 h10 ma2 ba bw1 b--purple br3 shadow-3 grow\">\r\n\t\t\t    <img src={`https://robohash.org/${id}.jpg?bgset=bg1`} alt=\"Robocop\" />\r\n\t\t\t    <h1 className=\"f3\">{name}</h1>\r\n\t\t\t    <h2 className=\"f6 normal\">{email}</h2>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'; \r\n\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n\t\treturn (\r\n\t\t<div className='flex flex-wrap justify-center'>\r\n\t\t\t{ robots.map( robot => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} /> ) }\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className='ma4'>\r\n\t\t\t<input onChange={searchChange} type='text' placeholder='Search Robocops' />\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: \"scroll\" , height: \"500px\", border: \"3px solid midnightblue\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tif (this.state.hasError) {\r\n\t\t\t\r\n\t\t\treturn (\r\n\r\n\t\t\t\t<h1 className = 'tc'>OOOOOOPPPPPPSSSSSS.....Something Went Wrong..</h1>\r\n\r\n\t\t\t\t);\r\n\t\t}   return this.props.children\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport 'tachyons';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n\treturn {\tsearchField: state.searchRobots.searchField,\r\n\t\t\t\tisPending: state.getRobots.isPending,\r\n\t\t\t\trobots: state.getRobots.robots,\r\n\t\t\t\terror: state.getRobots.error\r\n\t\t\t }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n\treturn  ({ \r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonGetRobots: () => dispatch(requestRobots())\r\n\t\t})\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\tthis.props.onGetRobots();\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n\t\tvar filteredRobots = robots.filter((robot) => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()) \r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n\t\t\r\n\t\treturn ( \r\n\r\n \t\t\t<div className ='tc'>\r\n\r\n \t\t\t\t{ (isPending) \r\n \t\t\t\t\t? \r\n \t\t\t\t\t\t<div className = 'flex justify-center f4'>\r\n \t\t\t\t\t\t\t<h1>Loading....</h1>  \r\n \t\t\t\t\t\t</div>\r\n\r\n \t\t\t\t\t: \t\r\n\t\t\t \t\t\t<div className ='tc'>\r\n\t\t\t\t\t\t\t<h3 className='f1 ma3'>Robocops</h3>\r\n\t\t\t\t\t\t\t<Searchbox searchChange={onSearchChange}/>\r\n\t\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t\t\t<Cardlist robots={filteredRobots} />\r\n\t\t\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t \t\t\t</div>\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\t\t);\t\t\t\t\r\n\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { SET_SEARCH_FIELD } from './constants'; \r\nimport { REQUEST_ROBOTS_PENDING } from './constants'; \r\nimport { REQUEST_ROBOTS_SUCCESS } from './constants'; \r\nimport { REQUEST_ROBOTS_FAILED } from './constants'; \r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\r\n\ttype: SET_SEARCH_FIELD,\r\n\tpayload: text\r\n\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }) )\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }) )\r\n\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport logger from 'redux-logger';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, getRobots } from './reducers';\r\nimport './index.css';\r\nimport thunk from 'redux-thunk';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst rootReducer = combineReducers({ searchRobots, getRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t<Provider store={store}>\r\n    \t<App />\r\n    </Provider>\r\n  </React.StrictMode>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}